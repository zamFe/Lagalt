// <auto-generated />
using System;
using LagaltAPI.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace LagaltAPI.Migrations
{
    [DbContext(typeof(LagaltContext))]
    partial class LagaltContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.11")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("LagaltAPI.Models.Domain.Application", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("Accepted")
                        .HasColumnType("boolean");

                    b.Property<string>("Motivation")
                        .IsRequired()
                        .HasMaxLength(140)
                        .HasColumnType("character varying(140)");

                    b.Property<int>("ProjectId")
                        .HasColumnType("integer");

                    b.Property<bool>("Seen")
                        .HasColumnType("boolean");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("UserId");

                    b.ToTable("Applications");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Accepted = true,
                            Motivation = "Jeg elsker også ubåter!!!",
                            ProjectId = 1,
                            Seen = false,
                            UserId = 2
                        },
                        new
                        {
                            Id = 2,
                            Accepted = true,
                            Motivation = "Prøver å finne ut om jeg liker ubåter...",
                            ProjectId = 1,
                            Seen = false,
                            UserId = 3
                        },
                        new
                        {
                            Id = 3,
                            Accepted = false,
                            Motivation = "Hva er en ubåt?",
                            ProjectId = 1,
                            Seen = false,
                            UserId = 5
                        });
                });

            modelBuilder.Entity("LagaltAPI.Models.Domain.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(140)
                        .HasColumnType("character varying(140)");

                    b.Property<DateTime>("PostedTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("ProjectId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("UserId");

                    b.ToTable("Messages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Content = "Andre enn meg som liker ubåter?",
                            PostedTime = new DateTime(2021, 10, 2, 12, 30, 52, 0, DateTimeKind.Unspecified),
                            ProjectId = 1,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            Content = "Jaa",
                            PostedTime = new DateTime(2021, 10, 2, 12, 40, 33, 0, DateTimeKind.Unspecified),
                            ProjectId = 1,
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            Content = "Usikker, vi må se an",
                            PostedTime = new DateTime(2021, 10, 3, 8, 20, 3, 0, DateTimeKind.Unspecified),
                            ProjectId = 1,
                            UserId = 3
                        });
                });

            modelBuilder.Entity("LagaltAPI.Models.Domain.Profession", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.HasKey("Id");

                    b.ToTable("Professions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Musikk"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Film"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Spillutvikling"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Webutvikling"
                        });
                });

            modelBuilder.Entity("LagaltAPI.Models.Domain.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int[]>("AdministratorIds")
                        .IsRequired()
                        .HasColumnType("integer[]");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<string>("Image")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("ProfessionId")
                        .HasColumnType("integer");

                    b.Property<string>("Progress")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Source")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.HasKey("Id");

                    b.HasIndex("ProfessionId");

                    b.ToTable("Projects");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AdministratorIds = new[] { 1 },
                            Description = "Jeg har alltid hatt lyst til å reise i en ubåt, og jeg må også skrive låter",
                            Image = "https://upload.wikimedia.org/wikipedia/commons/d/d8/Submarine_Vepr_by_Ilya_Kurganov_crop.jpg",
                            ProfessionId = 1,
                            Progress = "In Progress",
                            Title = "Skrive et album på en ubåt"
                        },
                        new
                        {
                            Id = 2,
                            AdministratorIds = new[] { 4 },
                            Description = "Some call them movies and some call them films. På norsk gjør vi det litt enklere",
                            ProfessionId = 2,
                            Progress = "Founding",
                            Title = "Den Filmiske Film Filmen"
                        },
                        new
                        {
                            Id = 3,
                            AdministratorIds = new[] { 5 },
                            Description = "Hva kan gå galt?",
                            ProfessionId = 3,
                            Progress = "Completed",
                            Source = "https://github.com/vocollapse/Blockinger",
                            Title = "Enda et tetris spill"
                        },
                        new
                        {
                            Id = 4,
                            AdministratorIds = new[] { 6 },
                            Description = "Alt var bedre før",
                            ProfessionId = 3,
                            Progress = "Stalled",
                            Source = "https://github.com/ddevault/TrueCraft",
                            Title = "Minecraft Nostalgi"
                        },
                        new
                        {
                            Id = 5,
                            AdministratorIds = new int[0],
                            Description = "Jeg har definitivt lest det",
                            Image = "https://raw.githubusercontent.com/ddevault/TrueCraft/master/TrueCraft.Client/Content/terrain.png",
                            ProfessionId = 4,
                            Progress = "Stalled",
                            Source = "https://github.com/ddevault/RedditSharp",
                            Title = "Reddit API"
                        });
                });

            modelBuilder.Entity("LagaltAPI.Models.Domain.Skill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("Skills");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Gitar"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Trommer"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Skuespill"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Unity"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Unit testing"
                        },
                        new
                        {
                            Id = 6,
                            Name = "TypeScript"
                        });
                });

            modelBuilder.Entity("LagaltAPI.Models.Domain.Update", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(140)
                        .HasColumnType("character varying(140)");

                    b.Property<DateTime>("PostedTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("ProjectId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("UserId");

                    b.ToTable("Updates");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Content = "Nå har vi fått leid en ubåt!",
                            PostedTime = new DateTime(2021, 10, 9, 2, 30, 32, 0, DateTimeKind.Unspecified),
                            ProjectId = 1,
                            UserId = 1
                        });
                });

            modelBuilder.Entity("LagaltAPI.Models.Domain.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int[]>("AppliedTo")
                        .IsRequired()
                        .HasColumnType("integer[]");

                    b.Property<int[]>("Clicked")
                        .IsRequired()
                        .HasColumnType("integer[]");

                    b.Property<int[]>("ContributedTo")
                        .IsRequired()
                        .HasColumnType("integer[]");

                    b.Property<string>("Description")
                        .HasMaxLength(140)
                        .HasColumnType("character varying(140)");

                    b.Property<bool>("Hidden")
                        .HasColumnType("boolean");

                    b.Property<string>("Image")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Portfolio")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<int[]>("Viewed")
                        .IsRequired()
                        .HasColumnType("integer[]");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppliedTo = new int[0],
                            Clicked = new[] { 1 },
                            ContributedTo = new[] { 1 },
                            Description = "Looking for my friend, Mr. Tambourine",
                            Hidden = false,
                            Image = "https://upload.wikimedia.org/wikipedia/commons/0/02/Bob_Dylan_-_Azkena_Rock_Festival_2010_2.jpg",
                            Portfolio = "https://en.wikipedia.org/wiki/Bob_Dylan_discography",
                            Username = "Bob",
                            Viewed = new[] { 1 }
                        },
                        new
                        {
                            Id = 2,
                            AppliedTo = new[] { 1 },
                            Clicked = new[] { 1 },
                            ContributedTo = new[] { 1 },
                            Description = "Lærer å fly for øyeblikket",
                            Hidden = false,
                            Portfolio = "https://en.wikipedia.org/wiki/Dave_Grohl#Career",
                            Username = "Grohl",
                            Viewed = new[] { 1 }
                        },
                        new
                        {
                            Id = 3,
                            AppliedTo = new[] { 1 },
                            Clicked = new[] { 1 },
                            ContributedTo = new int[0],
                            Hidden = true,
                            Image = "https://upload.wikimedia.org/wikipedia/commons/6/6b/Sean_Connery_as_James_Bond_in_Goldfinger.jpg",
                            Username = "DoubleOh",
                            Viewed = new[] { 1 }
                        },
                        new
                        {
                            Id = 4,
                            AppliedTo = new int[0],
                            Clicked = new[] { 2 },
                            ContributedTo = new[] { 2 },
                            Hidden = false,
                            Portfolio = "https://static.wikia.nocookie.net/villains/images/2/21/Mister_Robotnik_the_Doctor.jpg/",
                            Username = "ManOfEgg",
                            Viewed = new[] { 2 }
                        },
                        new
                        {
                            Id = 5,
                            AppliedTo = new int[0],
                            Clicked = new[] { 3 },
                            ContributedTo = new[] { 3 },
                            Description = "Spillutvikler, elns",
                            Hidden = false,
                            Username = "Rob",
                            Viewed = new[] { 3 }
                        },
                        new
                        {
                            Id = 6,
                            AppliedTo = new int[0],
                            Clicked = new[] { 4 },
                            ContributedTo = new[] { 4 },
                            Hidden = false,
                            Image = "https://avatars.githubusercontent.com/u/1310872",
                            Portfolio = "https://git.sr.ht/~sircmpwn",
                            Username = "Drew",
                            Viewed = new[] { 4 }
                        });
                });

            modelBuilder.Entity("ProjectSkills", b =>
                {
                    b.Property<int>("SkillId")
                        .HasColumnType("integer");

                    b.Property<int>("ProjectId")
                        .HasColumnType("integer");

                    b.HasKey("SkillId", "ProjectId");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectSkills");

                    b.HasData(
                        new
                        {
                            SkillId = 1,
                            ProjectId = 1
                        },
                        new
                        {
                            SkillId = 2,
                            ProjectId = 1
                        },
                        new
                        {
                            SkillId = 3,
                            ProjectId = 2
                        },
                        new
                        {
                            SkillId = 4,
                            ProjectId = 3
                        },
                        new
                        {
                            SkillId = 5,
                            ProjectId = 4
                        },
                        new
                        {
                            SkillId = 6,
                            ProjectId = 5
                        });
                });

            modelBuilder.Entity("ProjectUsers", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("ProjectId")
                        .HasColumnType("integer");

                    b.HasKey("UserId", "ProjectId");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectUsers");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            ProjectId = 1
                        },
                        new
                        {
                            UserId = 2,
                            ProjectId = 1
                        },
                        new
                        {
                            UserId = 3,
                            ProjectId = 1
                        },
                        new
                        {
                            UserId = 4,
                            ProjectId = 2
                        },
                        new
                        {
                            UserId = 5,
                            ProjectId = 3
                        },
                        new
                        {
                            UserId = 6,
                            ProjectId = 4
                        });
                });

            modelBuilder.Entity("UserSkills", b =>
                {
                    b.Property<int>("SkillId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("SkillId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserSkills");

                    b.HasData(
                        new
                        {
                            SkillId = 1,
                            UserId = 1
                        },
                        new
                        {
                            SkillId = 1,
                            UserId = 2
                        },
                        new
                        {
                            SkillId = 2,
                            UserId = 2
                        },
                        new
                        {
                            SkillId = 3,
                            UserId = 3
                        },
                        new
                        {
                            SkillId = 3,
                            UserId = 4
                        },
                        new
                        {
                            SkillId = 4,
                            UserId = 4
                        },
                        new
                        {
                            SkillId = 5,
                            UserId = 4
                        },
                        new
                        {
                            SkillId = 1,
                            UserId = 5
                        },
                        new
                        {
                            SkillId = 2,
                            UserId = 5
                        },
                        new
                        {
                            SkillId = 3,
                            UserId = 5
                        },
                        new
                        {
                            SkillId = 4,
                            UserId = 5
                        },
                        new
                        {
                            SkillId = 5,
                            UserId = 5
                        },
                        new
                        {
                            SkillId = 6,
                            UserId = 5
                        });
                });

            modelBuilder.Entity("LagaltAPI.Models.Domain.Application", b =>
                {
                    b.HasOne("LagaltAPI.Models.Domain.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LagaltAPI.Models.Domain.User", "User")
                        .WithMany("Applications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LagaltAPI.Models.Domain.Message", b =>
                {
                    b.HasOne("LagaltAPI.Models.Domain.Project", "Project")
                        .WithMany("Messages")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LagaltAPI.Models.Domain.User", "User")
                        .WithMany("Messages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LagaltAPI.Models.Domain.Project", b =>
                {
                    b.HasOne("LagaltAPI.Models.Domain.Profession", "Profession")
                        .WithMany("Projects")
                        .HasForeignKey("ProfessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Profession");
                });

            modelBuilder.Entity("LagaltAPI.Models.Domain.Update", b =>
                {
                    b.HasOne("LagaltAPI.Models.Domain.Project", "Project")
                        .WithMany("Updates")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LagaltAPI.Models.Domain.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ProjectSkills", b =>
                {
                    b.HasOne("LagaltAPI.Models.Domain.Project", null)
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LagaltAPI.Models.Domain.Skill", null)
                        .WithMany()
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjectUsers", b =>
                {
                    b.HasOne("LagaltAPI.Models.Domain.Project", null)
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LagaltAPI.Models.Domain.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UserSkills", b =>
                {
                    b.HasOne("LagaltAPI.Models.Domain.Skill", null)
                        .WithMany()
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LagaltAPI.Models.Domain.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LagaltAPI.Models.Domain.Profession", b =>
                {
                    b.Navigation("Projects");
                });

            modelBuilder.Entity("LagaltAPI.Models.Domain.Project", b =>
                {
                    b.Navigation("Messages");

                    b.Navigation("Updates");
                });

            modelBuilder.Entity("LagaltAPI.Models.Domain.User", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("Messages");
                });
#pragma warning restore 612, 618
        }
    }
}
